using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TutorialArowOnScreenEdgeDrawer : MonoBehaviour
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//-//////////////////////////////////////////////////////////////////////////////////////////////////       Memories       ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////// Auto connections
	Camera ourCameraToDrawArrowOnItsEdge;
	TutorialArrowManager ourHeadArrowManagerToGiveUsListOfHighlightedSigns;


	///////////////////////////////////////////////////////////// Memory
	List<Need> listOfHighlightedSigns;


	Vector2 worldUnitsSizeOfScreen;

	Dictionary<Need, GameObject> debugDictionaryToCheckInOut = new Dictionary<Need, GameObject>();
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//+///////////////////////////////////////////////////////////////////////////////////////////////         Actions        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private void Awake()
	{
		ourCameraToDrawArrowOnItsEdge = Camera.main;
	}

	public void HigherUpMessageListBeenUpdated(List<Need> newListOfHighlightSigns)
	{
		listOfHighlightedSigns = newListOfHighlightSigns;

		debugDictionaryToCheckInOut.Clear();
		foreach (Need h in listOfHighlightedSigns)
		{
			debugDictionaryToCheckInOut.Add(h, null);
		}
	}

	void GetScreenSize()
	{
		worldUnitsSizeOfScreen = new Vector2(ourCameraToDrawArrowOnItsEdge.orthographicSize * ourCameraToDrawArrowOnItsEdge.aspect, ourCameraToDrawArrowOnItsEdge.orthographicSize);
	}


	

	bool CheckIfSignIsOutOfCameraView(Need signToCheck)
	{
		Vector3 SignPosition = signToCheck.transform.position;
		Vector3 CameraPosition = Camera.main.transform.position;
		Vector2 DifferenceFromCameraPosition = new Vector2(MathF.Abs(SignPosition.x - CameraPosition.x), MathF.Abs(SignPosition.y - CameraPosition.y));

		if (DifferenceFromCameraPosition.x > worldUnitsSizeOfScreen.x || DifferenceFromCameraPosition.y > worldUnitsSizeOfScreen.y)
		{
			return true;
		}
		else
		{
			return false;
		}
	}


}
