using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TutorialArrowManager : MonoBehaviour
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//-//////////////////////////////////////////////////////////////////////////////////////////////////       Memories       ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	List<Need> signsToShowTHeirArrows = new List<Need>();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//+///////////////////////////////////////////////////////////////////////////////////////////////         Actions        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//I///////////////////////////////////////////////////////////     Initalize       /////////////////////////////////////////////////////////////
	private void Awake()
	{
		GameStateInformationProvider.NormalGameStart += OnGameStarted;
		GameStateInformationProvider.GameEnded += OnGameEnded;
	}



	//S///////////////////////////////////////////////////////////     OnGameStarted       /////////////////////////////////////////////////////////////
	private void OnGameStarted()
	{
		
		foreach (Need need in FindObjectsOfType(typeof(Need), true))
		{
			signsToShowTHeirArrows.Add(need);
		}
	}


	//S///////////////////////////////////////////////////////////     OnGameEnded      /////////////////////////////////////////////////////////////

	private void OnGameEnded()
	{

		signsToShowTHeirArrows.Clear();

	}







	//OA///////////////////////////////////////////////////////////     Ocational actions      /////////////////////////////////////////////////////////////
	public void HighlightAll()
	{
		foreach (Need signToChange in signsToShowTHeirArrows)
		{
			if(signToChange.currentSignValue != 100f && signToChange.isMainSign== false)
			{
				signToChange.ArrowForHighlighting.SetActive(true);
				signToChange.ourCountryParent.ourmainSign.ArrowForHighlighting.SetActive(true);
			}
			
		}
	}
	public void HighlightSome()
	{
		Needs needToHiglight = GameStateInformationProvider.informationCurrentExchange.typeOfExchange;
		bool signToHighlightIsMoreThan100 = GameStateInformationProvider.informationCurrentExchange.otherToCompletExchangeIsMoreTHan100;
		foreach (Need signToChange in signsToShowTHeirArrows)
		{

			if (signToChange.sighnNeedType == needToHiglight && (signToHighlightIsMoreThan100 ? signToChange.currentSignValue > 100 : signToChange.currentSignValue < 100) && signToChange.isMainSign == false)
			{
				signToChange.ArrowForHighlighting.SetActive(true);
				signToChange.ourCountryParent.ourmainSign.ArrowForHighlighting.SetActive(true); ;
			}

		}
	}
	public void StopAllHighlight()
	{
		foreach (Need signToChange in signsToShowTHeirArrows)
		{
			signToChange.ArrowForHighlighting.SetActive(false); 
		}
	}
}
